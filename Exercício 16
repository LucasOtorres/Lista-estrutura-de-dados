import java.util.*;

public class GrafoListaAdjacencia {
    private Map<Integer, Set<Integer>> adjacencias;

    public GrafoListaAdjacencia() {
        adjacencias = new HashMap<>();
    }

    // Métodos básicos (já implementados)
    public void adicionarAresta(int u, int v) {
        adjacencias.computeIfAbsent(u, k -> new HashSet<>()).add(v);
        adjacencias.computeIfAbsent(v, k -> new HashSet<>()).add(u);
    }

    public void removerAresta(int u, int v) {
        if (adjacencias.containsKey(u)) adjacencias.get(u).remove(v);
        if (adjacencias.containsKey(v)) adjacencias.get(v).remove(u);
    }

    public boolean existeAresta(int u, int v) {
        return adjacencias.getOrDefault(u, Collections.emptySet()).contains(v);
    }

    // --- BFS (Busca em Largura) ---
    public List<Integer> bfs(int inicio) {
        List<Integer> resultado = new ArrayList<>();
        Queue<Integer> fila = new LinkedList<>();
        Set<Integer> visitados = new HashSet<>();

        fila.add(inicio);
        visitados.add(inicio);

        while (!fila.isEmpty()) {
            int vertice = fila.poll();
            resultado.add(vertice);

            for (int vizinho : adjacencias.getOrDefault(vertice, Collections.emptySet())) {
                if (!visitados.contains(vizinho)) {
                    visitados.add(vizinho);
                    fila.add(vizinho);
                }
            }
        }
        return resultado;
    }

    // --- DFS (Busca em Profundidade) ---
    public List<Integer> dfs(int inicio) {
        List<Integer> resultado = new ArrayList<>();
        Stack<Integer> pilha = new Stack<>();
        Set<Integer> visitados = new HashSet<>();

        pilha.push(inicio);
        visitados.add(inicio);

        while (!pilha.isEmpty()) {
            int vertice = pilha.pop();
            resultado.add(vertice);

            for (int vizinho : adjacencias.getOrDefault(vertice, Collections.emptySet())) {
                if (!visitados.contains(vizinho)) {
                    visitados.add(vizinho);
                    pilha.push(vizinho);
                }
            }
        }
        return resultado;
    }

    // Exemplo de uso
    public static void main(String[] args) {
        GrafoListaAdjacencia grafo = new GrafoListaAdjacencia();
        grafo.adicionarAresta(1, 2);
        grafo.adicionarAresta(1, 3);
        grafo.adicionarAresta(2, 4);
        grafo.adicionarAresta(3, 5);

        System.out.println("BFS a partir do vértice 1: " + grafo.bfs(1));
        System.out.println("DFS a partir do vértice 1: " + grafo.dfs(1));
    }
}
