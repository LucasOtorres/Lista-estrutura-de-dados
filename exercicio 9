public int altura() {
    return alturaRec(raiz);
}

private int alturaRec(No no) {
    if (no == null) {
        return -1; // altura de uma árvore vazia é -1 (ou pode ser 0 se considerar nós em vez de arestas)
    } else {
        int alturaEsquerda = alturaRec(no.esquerda);
        int alturaDireita = alturaRec(no.direita);
        return Math.max(alturaEsquerda, alturaDireita) + 1;
    }
}
public void preOrdem() {
    preOrdemRec(raiz);
    System.out.println();
}

private void preOrdemRec(No no) {
    if (no != null) {
        System.out.print(no.valor + " ");
        preOrdemRec(no.esquerda);
        preOrdemRec(no.direita);
    }
}

public void emOrdem() {
    emOrdemRec(raiz);
    System.out.println();
}

private void emOrdemRec(No no) {
    if (no != null) {
        emOrdemRec(no.esquerda);
        System.out.print(no.valor + " ");
        emOrdemRec(no.direita);
    }
}

public void posOrdem() {
    posOrdemRec(raiz);
    System.out.println();
}

private void posOrdemRec(No no) {
    if (no != null) {
        posOrdemRec(no.esquerda);
        posOrdemRec(no.direita);
        System.out.print(no.valor + " ");
    }
}
