import java.util.*;

public class PriorityQueue<T> {
    private List<Object[]> heap = new ArrayList<>(); // [valor, prioridade]

    public void enqueue(T val, int prio) {
        heap.add(new Object[]{val, prio});
        for (int i = heap.size()-1; i > 0 && (int)heap.get(i)[1] > (int)heap.get((i-1)/2)[1]; i = (i-1)/2)
            Collections.swap(heap, i, (i-1)/2);
    }

    public T dequeue() {
        if (heap.isEmpty()) throw new NoSuchElementException();
        T max = (T) heap.get(0)[0];
        heap.set(0, heap.remove(heap.size()-1));
        for (int i = 0, child; (child = 2*i+1) < heap.size(); i = child) {
            if (child+1 < heap.size() && (int)heap.get(child+1)[1] > (int)heap.get(child)[1]) child++;
            if ((int)heap.get(i)[1] >= (int)heap.get(child)[1]) break;
            Collections.swap(heap, i, child);
        }
        return max;
    }

    public T peek() {
        if (heap.isEmpty()) throw new NoSuchElementException();
        return (T) heap.get(0)[0];
    }

    public boolean isEmpty() { return heap.isEmpty(); }

    // Exemplo de uso
    public static void main(String[] args) {
        PriorityQueue<String> pq = new PriorityQueue<>();
        pq.enqueue("Urgente", 3);
        pq.enqueue("Normal", 1);
        pq.enqueue("Muito Urgente", 5);
        while (!pq.isEmpty()) System.out.println(pq.dequeue());
    }
}
