import java.util.*;

public class PriorityHeap<T> {
    private List<Object[]> heap = new ArrayList<>(); // [0]: valor, [1]: prioridade

    public void insert(T val, int prio) {
        heap.add(new Object[]{val, prio});
        for (int i = heap.size() - 1; i > 0 && (int)heap.get(i)[1] > (int)heap.get((i - 1) / 2)[1]; i = (i - 1) / 2)
            Collections.swap(heap, i, (i - 1) / 2);
    }

    public T removeMax() {
        if (heap.isEmpty()) throw new NoSuchElementException("Heap vazio!");
        T max = (T) heap.get(0)[0];
        heap.set(0, heap.remove(heap.size() - 1));
        for (int i = 0, child; (child = 2 * i + 1) < heap.size(); i = child) {
            if (child + 1 < heap.size() && (int)heap.get(child + 1)[1] > (int)heap.get(child)[1]) child++;
            if ((int)heap.get(i)[1] >= (int)heap.get(child)[1]) break;
            Collections.swap(heap, i, child);
        }
        return max;
    }

    public T peekMax() {
        if (heap.isEmpty()) throw new NoSuchElementException("Heap vazio!");
        return (T) heap.get(0)[0];
    }

    public boolean isEmpty() { return heap.isEmpty(); }

    // Exemplo de uso
    public static void main(String[] args) {
        PriorityHeap<String> h = new PriorityHeap<>();
        h.insert("A", 3); h.insert("B", 1); h.insert("C", 5);
        while (!h.isEmpty()) System.out.println(h.removeMax()); // C, A, B
    }
}
