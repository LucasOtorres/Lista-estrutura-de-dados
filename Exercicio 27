import java.util.Arrays;
import java.util.Random;

public class ComparadorOrdenacao {
    public static void main(String[] args) {
        int[] tamanhos = {100, 1000, 5000};
        String[] tipos = {"ordenado", "inverso", "aleatorio"};
        
        for (int tamanho : tamanhos) {
            for (String tipo : tipos) {
                int[] arr = gerarArray(tamanho, tipo);
                
                System.out.printf("\nTamanho: %d, Tipo: %s\n", tamanho, tipo);
                compararAlgoritmos(arr);
            }
        }
    }
    
    public static int[] gerarArray(int tamanho, String tipo) {
        int[] arr = new int[tamanho];
        if (tipo.equals("ordenado")) {
            for (int i = 0; i < tamanho; i++) arr[i] = i + 1;
        } else if (tipo.equals("inverso")) {
            for (int i = 0; i < tamanho; i++) arr[i] = tamanho - i;
        } else {
            Random rand = new Random();
            for (int i = 0; i < tamanho; i++) arr[i] = rand.nextInt(tamanho) + 1;
        }
        return arr;
    }
    
    public static void compararAlgoritmos(int[] arr) {
        int[] temp;
        long inicio, fim;
        
        // Bubble Sort
        temp = Arrays.copyOf(arr, arr.length);
        inicio = System.nanoTime();
        bubbleSort(temp);
        fim = System.nanoTime();
        System.out.printf("Bubble Sort: %.3f ms\n", (fim - inicio) / 1e6);
        
        // Merge Sort
        temp = Arrays.copyOf(arr, arr.length);
        inicio = System.nanoTime();
        mergeSort(temp, 0, temp.length - 1);
        fim = System.nanoTime();
        System.out.printf("Merge Sort: %.3f ms\n", (fim - inicio) / 1e6);
        
        // Quick Sort
        temp = Arrays.copyOf(arr, arr.length);
        inicio = System.nanoTime();
        quickSort(temp, 0, temp.length - 1);
        fim = System.nanoTime();
        System.out.printf("Quick Sort: %.3f ms\n", (fim - inicio) / 1e6);
    }
    
    // Algoritmos de ordenação
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++)
            for (int j = 0; j < n-i-1; j++)
                if (arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
    }
    
    public static void mergeSort(int[] arr, int l, int r) {
        if (l < r) {
            int m = l + (r - l) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    
    private static void merge(int[] arr, int l, int m, int r) {
        int[] L = Arrays.copyOfRange(arr, l, m + 1);
        int[] R = Arrays.copyOfRange(arr, m + 1, r + 1);
        
        int i = 0, j = 0, k = l;
        while (i < L.length && j < R.length)
            arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
        
        while (i < L.length) arr[k++] = L[i++];
        while (j < R.length) arr[k++] = R[j++];
    }
    
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }
    
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++)
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}
